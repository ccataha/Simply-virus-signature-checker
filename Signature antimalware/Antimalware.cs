using System.Collections.Generic;
using System.Linq;
using System.Globalization;
using System.IO;
using System;

namespace Signature_antimalware
{
    class Antimalware
    {
        
        static List<string> txtsign = File.ReadAllLines("D:/всякое/4 Курс/2 сем/ТПЗВИ/Полковник/Лаб4/Signature antimalware/Signature antimalware/DB/Sign.txt").ToList();

        public static List<string> malwarecase = new List<string>();

        public static void IteratingFiles(string startPath)
        {
            string[] folders = Directory.GetDirectories(startPath);
            int lfolders = folders.Length;
            for (int i = 0; i < lfolders; i++)
            {
                IteratingFiles(folders[i]);
                if (i + 1 == lfolders)
                {
                    Console.WriteLine("Stop scan");
                }
            }
            string[] files = Directory.GetFiles(startPath, "*.exe");
            int lfiles = files.Length;
            for (int i = 0; i < lfiles; i++)
            {
                Scanner(files[i]);
            }
        }        
       
        public static void Scanner(string fileName)
        {  
            foreach (var signature in txtsign)
            {
                if (CheckSignature(File.ReadAllBytes(fileName), signature))
                {
                    fileName = fileName.Replace("/", "\\");
                    Console.WriteLine($"Attention at: {fileName}\r\n");
                    fileName = Path.GetFileNameWithoutExtension(fileName);
                    Console.WriteLine($" Malware signature was found at {fileName}.exe\r\n");
                    malwarecase.Add(fileName+".exe");
                    return;
                }
            }
            fileName = fileName.Replace("/", "\\");
            Console.WriteLine($"Signatures does not exist at: {fileName}\r\n");
        }
            
        public static bool CheckSignature(byte[] file, string signature)
        {
            int lengthFile = file.Length;
            string[] charsSignature = signature.Split(' ');
            int lengthSignature = charsSignature.Length;
            int k = 0;
            for (int i = 0; i < lengthFile; i++)
            {
                if (charsSignature[k] == "??" ||
                byte.Parse(charsSignature[k], NumberStyles.HexNumber) == file[i])
                {
                    k++;
                }
                else
                {
                    k = 0;
                    continue;
                }
                if (k == lengthSignature)
                {
                    return true;
                }
            }
            return false;
        }
    }
}
